{"name": "test_ReportPage", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method AccountReportPage.isAvailable_RunReportBtn of <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450>>()\n +    where <bound method AccountReportPage.isAvailable_RunReportBtn of <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450>> = <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450>.isAvailable_RunReportBtn\n +      where <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450> = <test_T1097700.Test_Report object at 0x000001D7FF7F48D0>.accountReportPage", "trace": "self = <test_T1097700.Test_Report object at 0x000001D7FF7F48D0>\n\n    @pytestrail.case('C32874')\n    def test_ReportPage(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Reports()\n        self.reportPage = ReportPage(self.driver)\n        page_found = self.reportPage.getPageTitle(\"Report\")\n        assert page_found\n        print(\"User has been navigated to Reports screen\")\n        self.reportPage.click_newUI_Reports()\n        time.sleep(2)\n        tab_found = self.reportPage.validate_Report_type_tabs(\"Account\")\n        assert tab_found\n        self.reportPage.click_report_type_tab(\"Account\")\n        self.accountReportPage = AccountReportPage(self.driver)\n        page_found = self.accountReportPage.validate_AccountReportsPage()\n        assert page_found\n        time.sleep(5)\n>       assert self.accountReportPage.isAvailable_RunReportBtn()\nE       assert False\nE        +  where False = <bound method AccountReportPage.isAvailable_RunReportBtn of <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450>>()\nE        +    where <bound method AccountReportPage.isAvailable_RunReportBtn of <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450>> = <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450>.isAvailable_RunReportBtn\nE        +      where <src.PageObjects.Reports.RunReports.RunReportsMainView.AccountReportPage.AccountReportPage object at 0x000001D785101450> = <test_T1097700.Test_Report object at 0x000001D7FF7F48D0>.accountReportPage\n\nsrc\\Tests\\SmokeSanityTestSuite\\Reports\\RunReports\\RunReportsMainView\\test_T1097700.py:38: AssertionError"}, "start": 1713351709050, "stop": 1713351741889, "uuid": "6cf23f6c-380a-4b56-adb2-032539f5b9d2", "historyId": "faface88bc6ca5e1185f21208171f4bb", "testCaseId": "faface88bc6ca5e1185f21208171f4bb", "fullName": "src.Tests.SmokeSanityTestSuite.Reports.RunReports.RunReportsMainView.test_T1097700.Test_Report#test_ReportPage", "labels": [{"name": "tag", "value": "testrail(ids=('C32874',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Reports.RunReports.RunReportsMainView"}, {"name": "suite", "value": "test_T1097700"}, {"name": "subSuite", "value": "Test_Report"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "263824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Reports.RunReports.RunReportsMainView.test_T1097700"}]}