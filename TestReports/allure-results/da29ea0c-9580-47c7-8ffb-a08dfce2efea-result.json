{"name": "test_editJobSites", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome-headless-shell=124.0.6367.61)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7C0C61522+60802]\n\t(No symbol) [0x00007FF7C0BDAC22]\n\t(No symbol) [0x00007FF7C0A97CE4]\n\t(No symbol) [0x00007FF7C0A7FA14]\n\t(No symbol) [0x00007FF7C0A7F8E0]\n\t(No symbol) [0x00007FF7C0A9A291]\n\t(No symbol) [0x00007FF7C0B298F9]\n\t(No symbol) [0x00007FF7C0B0A923]\n\t(No symbol) [0x00007FF7C0AD8FEC]\n\t(No symbol) [0x00007FF7C0AD9C21]\n\tGetHandleVerifier [0x00007FF7C0F6413D+3217821]\n\tGetHandleVerifier [0x00007FF7C0FA60D7+3488055]\n\tGetHandleVerifier [0x00007FF7C0F9F05F+3459263]\n\tGetHandleVerifier [0x00007FF7C0D1B866+823494]\n\t(No symbol) [0x00007FF7C0BE5FBF]\n\t(No symbol) [0x00007FF7C0BE0EE4]\n\t(No symbol) [0x00007FF7C0BE1072]\n\t(No symbol) [0x00007FF7C0BD18C4]\n\tBaseThreadInitThunk [0x00007FF802F4257D+29]\n\tRtlUserThreadStart [0x00007FF80460AA58+40]", "trace": "self = <src.PageObjects.Company.JobSites.JobSitesUI.AddJobSite.JobSitesPage.JobSitesPage object at 0x0000022979935BD0>\nby_locator = ('xpath', \"(//input[@aria-label='Filter'])[1]\")\n\n    def clickToElementByJavaScriptExecutor(self, by_locator):\n        try:\n>           element = WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator))\n\nsrc\\PageObjects\\BasePage\\BasePage.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022979936D90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF7C0BD18C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FF802F4257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF80460AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome-headless-shell=124.0.6367.61)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C0C61522+60802]\nE       \t(No symbol) [0x00007FF7C0BDAC22]\nE       \t(No symbol) [0x00007FF7C0A97CE4]\nE       \t(No symbol) [0x00007FF7C0A7FA14]\nE       \t(No symbol) [0x00007FF7C0A7F8E0]\nE       \t(No symbol) [0x00007FF7C0A9A291]\nE       \t(No symbol) [0x00007FF7C0B298F9]\nE       \t(No symbol) [0x00007FF7C0B0A923]\nE       \t(No symbol) [0x00007FF7C0AD8FEC]\nE       \t(No symbol) [0x00007FF7C0AD9C21]\nE       \tGetHandleVerifier [0x00007FF7C0F6413D+3217821]\nE       \tGetHandleVerifier [0x00007FF7C0FA60D7+3488055]\nE       \tGetHandleVerifier [0x00007FF7C0F9F05F+3459263]\nE       \tGetHandleVerifier [0x00007FF7C0D1B866+823494]\nE       \t(No symbol) [0x00007FF7C0BE5FBF]\nE       \t(No symbol) [0x00007FF7C0BE0EE4]\nE       \t(No symbol) [0x00007FF7C0BE1072]\nE       \t(No symbol) [0x00007FF7C0BD18C4]\nE       \tBaseThreadInitThunk [0x00007FF802F4257D+29]\nE       \tRtlUserThreadStart [0x00007FF80460AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_T1097112.Test_JobSites object at 0x0000022978BD48D0>\n\n    @pytestrail.case('C25959')\n    def test_editJobSites(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        time.sleep(2)\n        self.employeesPage.click_company_icon(\"Jobsite\")\n        self.jobSitesPage = JobSitesPage(self.driver)\n        time.sleep(5)\n        page_found = self.jobSitesPage.getPageTitle(\"Jobsite\")\n        assert page_found\n        siteName = self.jobSitesPage.generate_random_string(5)\n        self.jobSitesPage.addJobSite(siteName, \"Noida 201301\")\n        time.sleep(2)\n>       self.jobSitesPage.click_edit_for_JobSiteName(siteName)\n\nsrc\\Tests\\SmokeSanityTestSuite\\Company\\JobSites\\JobSitesUI\\EditJobSite\\test_T1097112.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\PageObjects\\Company\\JobSites\\JobSitesUI\\AddJobSite\\JobSitesPage.py:162: in click_edit_for_JobSiteName\n    self.clickToElementByJavaScriptExecutor(self.FilterNameBox)\nsrc\\PageObjects\\BasePage\\BasePage.py:59: in clickToElementByJavaScriptExecutor\n    self.driver.get_screenshot_as_file(\"screenshot.png\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:798: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022979936D90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF7C0BD18C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FF802F4257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF80460AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome-headless-shell=124.0.6367.61)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7C0C61522+60802]\nE       \t(No symbol) [0x00007FF7C0BDAC22]\nE       \t(No symbol) [0x00007FF7C0A97CE4]\nE       \t(No symbol) [0x00007FF7C0A7FA14]\nE       \t(No symbol) [0x00007FF7C0A7F8E0]\nE       \t(No symbol) [0x00007FF7C0A9A291]\nE       \t(No symbol) [0x00007FF7C0B298F9]\nE       \t(No symbol) [0x00007FF7C0B0A923]\nE       \t(No symbol) [0x00007FF7C0AD8FEC]\nE       \t(No symbol) [0x00007FF7C0AD9C21]\nE       \tGetHandleVerifier [0x00007FF7C0F6413D+3217821]\nE       \tGetHandleVerifier [0x00007FF7C0FA60D7+3488055]\nE       \tGetHandleVerifier [0x00007FF7C0F9F05F+3459263]\nE       \tGetHandleVerifier [0x00007FF7C0D1B866+823494]\nE       \t(No symbol) [0x00007FF7C0BE5FBF]\nE       \t(No symbol) [0x00007FF7C0BE0EE4]\nE       \t(No symbol) [0x00007FF7C0BE1072]\nE       \t(No symbol) [0x00007FF7C0BD18C4]\nE       \tBaseThreadInitThunk [0x00007FF802F4257D+29]\nE       \tRtlUserThreadStart [0x00007FF80460AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1713942091784, "stop": 1713942439948, "uuid": "5e0c27ca-39ad-40aa-806d-a1c47c01f2df", "historyId": "56088634ee66f28e9616eb8da3f220aa", "testCaseId": "56088634ee66f28e9616eb8da3f220aa", "fullName": "src.Tests.SmokeSanityTestSuite.Company.JobSites.JobSitesUI.EditJobSite.test_T1097112.Test_JobSites#test_editJobSites", "labels": [{"name": "tag", "value": "testrail(ids=('C25959',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Company.JobSites.JobSitesUI.EditJobSite"}, {"name": "suite", "value": "test_T1097112"}, {"name": "subSuite", "value": "Test_JobSites"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "336072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Company.JobSites.JobSitesUI.EditJobSite.test_T1097112"}]}