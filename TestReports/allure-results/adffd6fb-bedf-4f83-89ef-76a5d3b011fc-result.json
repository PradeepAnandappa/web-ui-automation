{"name": "test_addEmployee", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\prade\\PycharmProjects\\allGeo_webApp\\src\\Resources\\Download\\employee-sample.csv\n  (Session info: chrome=120.0.6099.217)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6692E4D02+56194]\n\t(No symbol) [0x00007FF6692504B2]\n\t(No symbol) [0x00007FF6690F76AA]\n\t(No symbol) [0x00007FF66913AB70]\n\t(No symbol) [0x00007FF669165E7A]\n\t(No symbol) [0x00007FF669136226]\n\t(No symbol) [0x00007FF669166320]\n\t(No symbol) [0x00007FF669182786]\n\t(No symbol) [0x00007FF669165C23]\n\t(No symbol) [0x00007FF669134A45]\n\t(No symbol) [0x00007FF669135AD4]\n\tGetHandleVerifier [0x00007FF66965D5BB+3695675]\n\tGetHandleVerifier [0x00007FF6696B6197+4059159]\n\tGetHandleVerifier [0x00007FF6696ADF63+4025827]\n\tGetHandleVerifier [0x00007FF66937F029+687785]\n\t(No symbol) [0x00007FF66925B508]\n\t(No symbol) [0x00007FF669257564]\n\t(No symbol) [0x00007FF6692576E9]\n\t(No symbol) [0x00007FF669248094]\n\tBaseThreadInitThunk [0x00007FFBA43A257D+29]\n\tRtlUserThreadStart [0x00007FFBA638AA58+40]", "trace": "self = <test_T1097932.Test_Company object at 0x000001FF9B77AA90>\n\n    @pytestrail.case('C34854', 'C34855')\n    def test_addEmployee(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        self.employeesPage.click_Addnew()\n        self.employeesPage.click_MutipleTab()\n        time.sleep(2)\n        self.employeesPage.click_DownloadEmployeeData()\n        time.sleep(2)\n        file_path = str(Path.home()) + \"\\\\PycharmProjects\\\\allGeo_webApp\\\\src\\\\Resources\\\\Download\\\\employee-sample.csv\"\n        color = self.employeesPage.getColorOfAddButton()\n        print(\"Before selecting file, color of add button: \", color)\n        assert \"rgba(235, 235, 235, 1)\" == color\n>       self.employeesPage.uploadCSVFile(file_path)\n\nsrc\\Tests\\SmokeSanityTestSuite\\Company\\Employees\\MainView\\EmployeesCRUD_UI\\test_T1097932.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\PageObjects\\Company\\Employees\\MainView\\EmployeesCRUD_UI\\EmployeesPage.py:214: in uploadCSVFile\n    element.send_keys(file_path)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: in send_keys\n    self._execute(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FF9C29DCD0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...07FF669248094]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBA43A257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFBA638AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\prade\\PycharmProjects\\allGeo_webApp\\src\\Resources\\Download\\employee-sample.csv\nE         (Session info: chrome=120.0.6099.217)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6692E4D02+56194]\nE       \t(No symbol) [0x00007FF6692504B2]\nE       \t(No symbol) [0x00007FF6690F76AA]\nE       \t(No symbol) [0x00007FF66913AB70]\nE       \t(No symbol) [0x00007FF669165E7A]\nE       \t(No symbol) [0x00007FF669136226]\nE       \t(No symbol) [0x00007FF669166320]\nE       \t(No symbol) [0x00007FF669182786]\nE       \t(No symbol) [0x00007FF669165C23]\nE       \t(No symbol) [0x00007FF669134A45]\nE       \t(No symbol) [0x00007FF669135AD4]\nE       \tGetHandleVerifier [0x00007FF66965D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF6696B6197+4059159]\nE       \tGetHandleVerifier [0x00007FF6696ADF63+4025827]\nE       \tGetHandleVerifier [0x00007FF66937F029+687785]\nE       \t(No symbol) [0x00007FF66925B508]\nE       \t(No symbol) [0x00007FF669257564]\nE       \t(No symbol) [0x00007FF6692576E9]\nE       \t(No symbol) [0x00007FF669248094]\nE       \tBaseThreadInitThunk [0x00007FFBA43A257D+29]\nE       \tRtlUserThreadStart [0x00007FFBA638AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException"}, "start": 1705423575616, "stop": 1705423626469, "uuid": "44dbef00-47db-4863-a52c-60f0e9098bfb", "historyId": "71a9444e91b29009b6460a3c489e7221", "testCaseId": "71a9444e91b29009b6460a3c489e7221", "fullName": "src.Tests.SmokeSanityTestSuite.Company.Employees.MainView.EmployeesCRUD_UI.test_T1097932.Test_Company#test_addEmployee", "labels": [{"name": "tag", "value": "testrail(ids=('C34854', 'C34855'))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Company.Employees.MainView.EmployeesCRUD_UI"}, {"name": "suite", "value": "test_T1097932"}, {"name": "subSuite", "value": "Test_Company"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "14020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Company.Employees.MainView.EmployeesCRUD_UI.test_T1097932"}]}