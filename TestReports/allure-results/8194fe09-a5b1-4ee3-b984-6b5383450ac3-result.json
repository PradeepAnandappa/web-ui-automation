{"name": "test_GroupsUI", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome-headless-shell=124.0.6367.119)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7E12B1572+60802]\n\t(No symbol) [0x00007FF7E122AC72]\n\t(No symbol) [0x00007FF7E10E7CE4]\n\t(No symbol) [0x00007FF7E10E05B3]\n\t(No symbol) [0x00007FF7E10D13E4]\n\t(No symbol) [0x00007FF7E10D2C14]\n\t(No symbol) [0x00007FF7E10D1711]\n\t(No symbol) [0x00007FF7E10D1049]\n\t(No symbol) [0x00007FF7E10D0D42]\n\t(No symbol) [0x00007FF7E10CEBE4]\n\t(No symbol) [0x00007FF7E10CF22C]\n\t(No symbol) [0x00007FF7E10EA9F9]\n\t(No symbol) [0x00007FF7E117AB7E]\n\t(No symbol) [0x00007FF7E115AB7A]\n\t(No symbol) [0x00007FF7E117A224]\n\t(No symbol) [0x00007FF7E115A923]\n\t(No symbol) [0x00007FF7E1128FEC]\n\t(No symbol) [0x00007FF7E1129C21]\n\tGetHandleVerifier [0x00007FF7E15B420D+3217949]\n\tGetHandleVerifier [0x00007FF7E15F61A7+3488183]\n\tGetHandleVerifier [0x00007FF7E15EF12F+3459391]\n\tGetHandleVerifier [0x00007FF7E136B936+823622]\n\t(No symbol) [0x00007FF7E123600F]\n\t(No symbol) [0x00007FF7E1230F34]\n\t(No symbol) [0x00007FF7E12310C2]\n\t(No symbol) [0x00007FF7E1221914]\n\tBaseThreadInitThunk [0x00007FFB4F9C257D+29]\n\tRtlUserThreadStart [0x00007FFB50B2AA58+40]", "trace": "request = <SubRequest 'setup_driver' for <Function test_GroupsUI>>, getBrowser = 'chrome', getEnvironment = 'production'\n\n    @pytest.fixture\n    def setup_driver(request, getBrowser, getEnvironment):\n        if getBrowser == \"chrome\":\n           #web_driver = webdriver.Chrome(executable_path=config.chromeDriver)\n            chromeOptions = webdriver.ChromeOptions()\n            file_path = str(Path.home()) + \"\\\\PycharmProjects\\\\allgeo_web_app_pro\\\\src\\\\Resources\\\\Download\"\n            print(\"download directory: \"+file_path)\n    \n            chromeOptions.add_argument(\"--window-size=1920,1080\")\n            chromeOptions.add_argument(\"--disable-extensions\")\n            chromeOptions.add_argument(\"--proxy-server='direct://'\")\n            chromeOptions.add_argument(\"--proxy-bypass-list=*\")\n            chromeOptions.add_argument(\"--start-maximized\")\n            chromeOptions.add_argument('--headless')\n            chromeOptions.add_argument('--disable-gpu')\n            chromeOptions.add_argument('--disable-dev-shm-usage')\n            chromeOptions.add_argument('--no-sandbox')\n            chromeOptions.add_argument('--ignore-certificate-errors')\n            prefs = {\"download.default_directory\": file_path, \"profile.default_content_setting_values.automatic_downloads\": 1}\n            chromeOptions.add_experimental_option(\"prefs\", prefs)\n            web_driver = webdriver.Chrome(options=chromeOptions)\n        elif getBrowser == \"firefox\":\n            web_driver = webdriver.Firefox(executable_path=config.firefoxDriver)\n    \n        elif getBrowser == \"grid\":\n            hub_url = \"http://localhost:4444/wd/hub\"\n            desired_capabilities = DesiredCapabilities.CHROME  # Change this to your desired browser\n            web_driver = webdriver.Remote(hub_url, desired_capabilities=desired_capabilities)\n    \n        if getEnvironment == \"staging\":\n            config.baseURL = config.stageURL\n            #web_driver.get(config.stageURL)\n        elif getEnvironment == \"production\":\n            config.baseURL = config.prodURL\n            #web_driver.get(config.prodURL)\n>       web_driver.get(config.baseURL)\n\nconftest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002E7E18E5A10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF7E1221914]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB4F9C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB50B2AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome-headless-shell=124.0.6367.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E12B1572+60802]\nE       \t(No symbol) [0x00007FF7E122AC72]\nE       \t(No symbol) [0x00007FF7E10E7CE4]\nE       \t(No symbol) [0x00007FF7E10E05B3]\nE       \t(No symbol) [0x00007FF7E10D13E4]\nE       \t(No symbol) [0x00007FF7E10D2C14]\nE       \t(No symbol) [0x00007FF7E10D1711]\nE       \t(No symbol) [0x00007FF7E10D1049]\nE       \t(No symbol) [0x00007FF7E10D0D42]\nE       \t(No symbol) [0x00007FF7E10CEBE4]\nE       \t(No symbol) [0x00007FF7E10CF22C]\nE       \t(No symbol) [0x00007FF7E10EA9F9]\nE       \t(No symbol) [0x00007FF7E117AB7E]\nE       \t(No symbol) [0x00007FF7E115AB7A]\nE       \t(No symbol) [0x00007FF7E117A224]\nE       \t(No symbol) [0x00007FF7E115A923]\nE       \t(No symbol) [0x00007FF7E1128FEC]\nE       \t(No symbol) [0x00007FF7E1129C21]\nE       \tGetHandleVerifier [0x00007FF7E15B420D+3217949]\nE       \tGetHandleVerifier [0x00007FF7E15F61A7+3488183]\nE       \tGetHandleVerifier [0x00007FF7E15EF12F+3459391]\nE       \tGetHandleVerifier [0x00007FF7E136B936+823622]\nE       \t(No symbol) [0x00007FF7E123600F]\nE       \t(No symbol) [0x00007FF7E1230F34]\nE       \t(No symbol) [0x00007FF7E12310C2]\nE       \t(No symbol) [0x00007FF7E1221914]\nE       \tBaseThreadInitThunk [0x00007FFB4F9C257D+29]\nE       \tRtlUserThreadStart [0x00007FFB50B2AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1715159991382, "stop": 1715159991382, "uuid": "aeab3780-b273-4ed1-b0e0-0205f277bff9", "historyId": "2a2c5f7e86082b04627d8e2644abcbb1", "testCaseId": "2a2c5f7e86082b04627d8e2644abcbb1", "fullName": "src.Tests.SmokeSanityTestSuite.Monitor.TrackingScheduler.TrackingScheduleUI.EditRecurringScheduler.test_T1097822.Test_Groups#test_GroupsUI", "labels": [{"name": "tag", "value": "testrail(ids=('C33058',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Monitor.TrackingScheduler.TrackingScheduleUI.EditRecurringScheduler"}, {"name": "suite", "value": "test_T1097822"}, {"name": "subSuite", "value": "Test_Groups"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "89936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Monitor.TrackingScheduler.TrackingScheduleUI.EditRecurringScheduler.test_T1097822"}]}