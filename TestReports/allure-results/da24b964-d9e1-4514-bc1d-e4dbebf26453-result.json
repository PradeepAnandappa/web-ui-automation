{"name": "test_LocateScheduleView", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\prade\\\\PycharmProjects\\\\allGeo_webApp\\\\src\\\\Resources\\\\Download\\\\Locate Schedules.xlsx'", "trace": "self = <test_T1097839.Test_LocateSchedule object at 0x000001D7FF77C290>\n\n    @pytestrail.case('C33100')\n    def test_LocateScheduleView(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        self.trackingSchedulerPage = TrackingSchedulerPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.monitorPage.click_TrackingSchedularTab()\n        page_URL = self.monitorPage.getPageURL()\n        Expected_URL = config.baseURL + \"/monitor/locate-schedule\"\n        assert Expected_URL == page_URL\n        self.trackingSchedulerPage.click_ExportToExcel()\n        time.sleep(5)\n        file_path = str(Path.home()) + \"\\\\PycharmProjects\\\\allGeo_webApp\\\\src\\\\Resources\\\\Download\\\\Locate Schedules.xlsx\"\n    \n        # Define variable to load the dataframe\n>       dataframe = openpyxl.load_workbook(file_path)\n\nsrc\\Tests\\SmokeSanityTestSuite\\Monitor\\TrackingScheduler\\TrackingScheduleUI\\LocateScheduleMainView\\test_T1097839.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:465: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\nvenv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:132: in __init__\n    self.archive = _validate_archive(fn)\nvenv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:104: in _validate_archive\n    archive = ZipFile(filename, 'r')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>, file = 'C:\\\\Users\\\\prade\\\\PycharmProjects\\\\allGeo_webApp\\\\src\\\\Resources\\\\Download\\\\Locate Schedules.xlsx'\nmode = 'r', compression = 0, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\prade\\\\PycharmProjects\\\\allGeo_webApp\\\\src\\\\Resources\\\\Download\\\\Locate Schedules.xlsx'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: FileNotFoundError"}, "start": 1713349776917, "stop": 1713349820046, "uuid": "15307f0d-969a-486a-968c-1eb580e72697", "historyId": "b163ad002634f48535e36a04b32ddf9d", "testCaseId": "b163ad002634f48535e36a04b32ddf9d", "fullName": "src.Tests.SmokeSanityTestSuite.Monitor.TrackingScheduler.TrackingScheduleUI.LocateScheduleMainView.test_T1097839.Test_LocateSchedule#test_LocateScheduleView", "labels": [{"name": "tag", "value": "testrail(ids=('C33100',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Monitor.TrackingScheduler.TrackingScheduleUI.LocateScheduleMainView"}, {"name": "suite", "value": "test_T1097839"}, {"name": "subSuite", "value": "Test_LocateSchedule"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "263824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Monitor.TrackingScheduler.TrackingScheduleUI.LocateScheduleMainView.test_T1097839"}]}