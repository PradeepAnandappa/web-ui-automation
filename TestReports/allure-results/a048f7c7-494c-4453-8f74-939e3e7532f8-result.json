{"name": "test_GeneralSettingsUI", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome-headless-shell=123.0.6312.123)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7A3517032+63090]\n\t(No symbol) [0x00007FF7A3482C82]\n\t(No symbol) [0x00007FF7A331EC65]\n\t(No symbol) [0x00007FF7A330C31B]\n\t(No symbol) [0x00007FF7A330BEC0]\n\t(No symbol) [0x00007FF7A3320EC1]\n\t(No symbol) [0x00007FF7A33A2AE9]\n\t(No symbol) [0x00007FF7A3386D83]\n\t(No symbol) [0x00007FF7A33583A8]\n\t(No symbol) [0x00007FF7A3359441]\n\tGetHandleVerifier [0x00007FF7A39125AD+4238317]\n\tGetHandleVerifier [0x00007FF7A394F70D+4488525]\n\tGetHandleVerifier [0x00007FF7A39479EF+4456495]\n\tGetHandleVerifier [0x00007FF7A35F0576+953270]\n\t(No symbol) [0x00007FF7A348E54F]\n\t(No symbol) [0x00007FF7A3489224]\n\t(No symbol) [0x00007FF7A348935B]\n\t(No symbol) [0x00007FF7A3479B94]\n\tBaseThreadInitThunk [0x00007FF802F4257D+29]\n\tRtlUserThreadStart [0x00007FF80460AA58+40]", "trace": "self = <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001D7FFECE7D0>\ntitleText = 'Employee'\n\n    def getPageTitle(self, titleText):\n        try:\n>           flag = WebDriverWait(self.driver, 60).until(ec.title_contains(titleText))\n\nsrc\\PageObjects\\BasePage\\BasePage.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:70: in _predicate\n    return title in driver.title\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:367: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D7FFECD850>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF7A3479B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FF802F4257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF80460AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome-headless-shell=123.0.6312.123)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7A3517032+63090]\nE       \t(No symbol) [0x00007FF7A3482C82]\nE       \t(No symbol) [0x00007FF7A331EC65]\nE       \t(No symbol) [0x00007FF7A330C31B]\nE       \t(No symbol) [0x00007FF7A330BEC0]\nE       \t(No symbol) [0x00007FF7A3320EC1]\nE       \t(No symbol) [0x00007FF7A33A2AE9]\nE       \t(No symbol) [0x00007FF7A3386D83]\nE       \t(No symbol) [0x00007FF7A33583A8]\nE       \t(No symbol) [0x00007FF7A3359441]\nE       \tGetHandleVerifier [0x00007FF7A39125AD+4238317]\nE       \tGetHandleVerifier [0x00007FF7A394F70D+4488525]\nE       \tGetHandleVerifier [0x00007FF7A39479EF+4456495]\nE       \tGetHandleVerifier [0x00007FF7A35F0576+953270]\nE       \t(No symbol) [0x00007FF7A348E54F]\nE       \t(No symbol) [0x00007FF7A3489224]\nE       \t(No symbol) [0x00007FF7A348935B]\nE       \t(No symbol) [0x00007FF7A3479B94]\nE       \tBaseThreadInitThunk [0x00007FF802F4257D+29]\nE       \tRtlUserThreadStart [0x00007FF80460AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_T1096917.Test_GeneralSettings object at 0x000001D7FF4A2E10>\n\n    @pytestrail.case('C24995')\n    def test_GeneralSettingsUI(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        time.sleep(5)\n>       page_found = self.employeesPage.validate_page_title()\n\nsrc\\Tests\\SmokeSanityTestSuite\\Company\\Settings\\GeneralSettings\\GeneralSettingsUI\\test_T1096917.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\PageObjects\\Company\\Employees\\MainView\\EmployeesCRUD_UI\\EmployeesPage.py:63: in validate_page_title\n    return self.getPageTitle(\"Employee\")\nsrc\\PageObjects\\BasePage\\BasePage.py:189: in getPageTitle\n    print(\"Expected Title word - \" + titleText + \" not found in page title: \" + self.driver.title)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:367: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D7FFECD850>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF7A3479B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FF802F4257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF80460AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome-headless-shell=123.0.6312.123)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7A3517032+63090]\nE       \t(No symbol) [0x00007FF7A3482C82]\nE       \t(No symbol) [0x00007FF7A331EC65]\nE       \t(No symbol) [0x00007FF7A330C31B]\nE       \t(No symbol) [0x00007FF7A330BEC0]\nE       \t(No symbol) [0x00007FF7A3320EC1]\nE       \t(No symbol) [0x00007FF7A33A2AE9]\nE       \t(No symbol) [0x00007FF7A3386D83]\nE       \t(No symbol) [0x00007FF7A33583A8]\nE       \t(No symbol) [0x00007FF7A3359441]\nE       \tGetHandleVerifier [0x00007FF7A39125AD+4238317]\nE       \tGetHandleVerifier [0x00007FF7A394F70D+4488525]\nE       \tGetHandleVerifier [0x00007FF7A39479EF+4456495]\nE       \tGetHandleVerifier [0x00007FF7A35F0576+953270]\nE       \t(No symbol) [0x00007FF7A348E54F]\nE       \t(No symbol) [0x00007FF7A3489224]\nE       \t(No symbol) [0x00007FF7A348935B]\nE       \t(No symbol) [0x00007FF7A3479B94]\nE       \tBaseThreadInitThunk [0x00007FF802F4257D+29]\nE       \tRtlUserThreadStart [0x00007FF80460AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1713336886456, "stop": 1713336899237, "uuid": "552a53b3-e96f-44ac-b405-8d7bc5a53653", "historyId": "faac044ed4390b66cb8aad951515a721", "testCaseId": "faac044ed4390b66cb8aad951515a721", "fullName": "src.Tests.SmokeSanityTestSuite.Company.Settings.GeneralSettings.GeneralSettingsUI.test_T1096917.Test_GeneralSettings#test_GeneralSettingsUI", "labels": [{"name": "tag", "value": "testrail(ids=('C24995',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Company.Settings.GeneralSettings.GeneralSettingsUI"}, {"name": "suite", "value": "test_T1096917"}, {"name": "subSuite", "value": "Test_GeneralSettings"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "263824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Company.Settings.GeneralSettings.GeneralSettingsUI.test_T1096917"}]}