{"name": "test_ACLPermission", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method EmployeesPage.isAvailable_leftPanelOption of <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550>>('Managers')\n +    where <bound method EmployeesPage.isAvailable_leftPanelOption of <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550>> = <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550>.isAvailable_leftPanelOption\n +      where <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550> = <test_T1536440.Test_Schedule object at 0x000001BBF9CABCD0>.employeesPage", "trace": "self = <test_T1536440.Test_Schedule object at 0x000001BBF9CABCD0>\n\n    @pytestrail.case('C38778', 'C29675', 'C29676', 'C29677')\n    def test_ACLPermission(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.monitorPage.switch_to_ChildAccount()\n        time.sleep(2)\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        self.employeesPage.click_company_icon(\"Managers\")\n        self.managersPage = ManagersPage(self.driver)\n        self.managersPage.click_edit_for_ManagerID(\"m101\")\n        self.editManagersPage = EditManagersPage(self.driver)\n        assert self.editManagersPage.validateHeaderTitle()\n        time.sleep(2)\n        self.editManagersPage.set_ACL_for(\"Manager\", \"Add\")\n        time.sleep(1)\n        self.editManagersPage.set_ACL_for(\"Manager\", \"View\")\n        self.editManagersPage.click_saveBtn()\n        time.sleep(2)\n        self.editManagersPage.click_Cancel()\n        time.sleep(2)\n        self.managersPage.logout_user()\n        time.sleep(2)\n        self.loginPage.user_login(\"test-web-automation-child\", \"m101\", \"Test@123\")\n        time.sleep(2)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        time.sleep(2)\n        flag = self.employeesPage.isAvailable_leftPanelOption(\"Managers\")\n        assert flag == bool(False)\n        self.employeesPage.logout_user()\n        time.sleep(2)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.monitorPage.switch_to_ChildAccount()\n        time.sleep(2)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage.click_company_icon(\"Managers\")\n        self.managersPage.click_edit_for_ManagerID(\"m101\")\n        assert self.editManagersPage.validateHeaderTitle()\n        time.sleep(2)\n        self.editManagersPage.set_ACL_for(\"Manager\", \"View\")\n        self.editManagersPage.click_saveBtn()\n        time.sleep(2)\n        self.editManagersPage.click_Cancel()\n        time.sleep(2)\n        self.managersPage.logout_user()\n        time.sleep(2)\n        self.loginPage.user_login(\"test-web-automation-child\", \"m101\", \"Test@123\")\n        time.sleep(2)\n        self.leftNavigationPanelPage.click_Company()\n        time.sleep(2)\n>       assert self.employeesPage.isAvailable_leftPanelOption(\"Managers\")\nE       AssertionError: assert False\nE        +  where False = <bound method EmployeesPage.isAvailable_leftPanelOption of <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550>>('Managers')\nE        +    where <bound method EmployeesPage.isAvailable_leftPanelOption of <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550>> = <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550>.isAvailable_leftPanelOption\nE        +      where <src.PageObjects.Company.Employees.MainView.EmployeesCRUD_UI.EmployeesPage.EmployeesPage object at 0x000001BBFA831550> = <test_T1536440.Test_Schedule object at 0x000001BBF9CABCD0>.employeesPage\n\nsrc\\Tests\\SmokeSanityTestSuite\\ACL_Impact\\SubmitGreyedOutButtonACLPermission\\test_T1536440.py:80: AssertionError"}, "start": 1713849510237, "stop": 1713849632707, "uuid": "159e857f-2f88-481c-ab2e-a5aca8d47833", "historyId": "62cbcc199e3c04d3f4a678a88b121732", "testCaseId": "62cbcc199e3c04d3f4a678a88b121732", "fullName": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission.test_T1536440.Test_Schedule#test_ACLPermission", "labels": [{"name": "tag", "value": "testrail(ids=('C38778', 'C29675', 'C29676', 'C29677'))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission"}, {"name": "suite", "value": "test_T1536440"}, {"name": "subSuite", "value": "Test_Schedule"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "279524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission.test_T1536440"}]}