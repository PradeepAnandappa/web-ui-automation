{"name": "test_addEmployee", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF6BAE17032+63090]\n\t(No symbol) [0x00007FF6BAD82C82]\n\t(No symbol) [0x00007FF6BAC1EC65]\n\t(No symbol) [0x00007FF6BAC6499D]\n\t(No symbol) [0x00007FF6BAC64ADC]\n\t(No symbol) [0x00007FF6BACA5B37]\n\t(No symbol) [0x00007FF6BAC8701F]\n\t(No symbol) [0x00007FF6BACA3412]\n\t(No symbol) [0x00007FF6BAC86D83]\n\t(No symbol) [0x00007FF6BAC583A8]\n\t(No symbol) [0x00007FF6BAC59441]\n\tGetHandleVerifier [0x00007FF6BB2125AD+4238317]\n\tGetHandleVerifier [0x00007FF6BB24F70D+4488525]\n\tGetHandleVerifier [0x00007FF6BB2479EF+4456495]\n\tGetHandleVerifier [0x00007FF6BAEF0576+953270]\n\t(No symbol) [0x00007FF6BAD8E54F]\n\t(No symbol) [0x00007FF6BAD89224]\n\t(No symbol) [0x00007FF6BAD8935B]\n\t(No symbol) [0x00007FF6BAD79B94]\n\tBaseThreadInitThunk [0x00007FF802F4257D+29]\n\tRtlUserThreadStart [0x00007FF80460AA58+40]", "trace": "self = <test_T1097384.Test_Company object at 0x000001BBF9C79A10>\n\n    @pytestrail.case('C29678', 'C29679', 'C29680', 'C29686', 'C29687')\n    def test_addEmployee(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        time.sleep(2)\n        self.monitorPage.switch_to_ChildAccount()\n        time.sleep(2)\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        time.sleep(5)\n        page_found = self.employeesPage.validate_page_title()\n        assert page_found\n        self.employeesPage.click_company_icon(\"Task\")\n        self.tasksPage = TasksPage(self.driver)\n        time.sleep(5)\n        page_found = self.tasksPage.get_page_title()\n        assert page_found\n        taskId = self.employeesPage.generate_random_string(5)+str(1)\n        taskName = self.employeesPage.generate_random_string(7)\n        self.tasksPage.addTask(taskId, taskName)\n        time.sleep(2)\n        assert self.tasksPage.validate_SuccessUpdateMessage(\"added successfully\")\n        time.sleep(2)\n        self.employeesPage.click_company_icon(\"Managers\")\n        self.managersPage = ManagersPage(self.driver)\n        self.managersPage.click_edit_for_ManagerID(\"m101\")\n        self.editManagersPage = EditManagersPage(self.driver)\n        self.editManagersPage.validateHeaderTitle()\n        time.sleep(2)\n        self.editManagersPage.set_ACL_for(\"Task\", \"Edit\")\n        self.editManagersPage.click_saveBtn()\n        time.sleep(2)\n        self.editManagersPage.click_Cancel()\n        time.sleep(2)\n        self.managersPage.logout_user()\n        time.sleep(2)\n        self.loginPage.user_login(\"test-web-automation-child\", \"m101\", \"Test@123\")\n        time.sleep(2)\n        self.leftNavigationPanelPage.click_Company()\n        page_found = self.employeesPage.validate_page_title()\n        assert page_found\n        self.employeesPage.click_company_icon(\"Task\")\n        time.sleep(5)\n        page_found = self.tasksPage.get_page_title()\n        assert page_found\n>       assert self.tasksPage.check_ActionLink_enabled(\"edit\", taskName)\n\nsrc\\Tests\\SmokeSanityTestSuite\\ACL_Impact\\SubmitGreyedOutButtonACLPermission\\test_T1097384.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\PageObjects\\Company\\Tasks\\TasksUI\\AddTask\\TasksPage.py:192: in check_ActionLink_enabled\n    flag = self.check_ActionLink_disabled(action_link, name)\nsrc\\PageObjects\\Company\\Tasks\\TasksUI\\AddTask\\TasksPage.py:186: in check_ActionLink_disabled\n    attr_value = self.get_AttributeValue(element_locator, \"class\")\nsrc\\PageObjects\\BasePage\\BasePage.py:138: in get_AttributeValue\n    element = WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(by_locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a939afe01bf444f0ea971bbc8d301813\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001BBFA7394E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6BAE17032+63090]\nE       \t(No symbol) [0x00007FF6BAD82C82]\nE       \t(No symbol) [0x00007FF6BAC1EC65]\nE       \t(No symbol) [0x00007FF6BAC6499D]\nE       \t(No symbol) [0x00007FF6BAC64ADC]\nE       \t(No symbol) [0x00007FF6BACA5B37]\nE       \t(No symbol) [0x00007FF6BAC8701F]\nE       \t(No symbol) [0x00007FF6BACA3412]\nE       \t(No symbol) [0x00007FF6BAC86D83]\nE       \t(No symbol) [0x00007FF6BAC583A8]\nE       \t(No symbol) [0x00007FF6BAC59441]\nE       \tGetHandleVerifier [0x00007FF6BB2125AD+4238317]\nE       \tGetHandleVerifier [0x00007FF6BB24F70D+4488525]\nE       \tGetHandleVerifier [0x00007FF6BB2479EF+4456495]\nE       \tGetHandleVerifier [0x00007FF6BAEF0576+953270]\nE       \t(No symbol) [0x00007FF6BAD8E54F]\nE       \t(No symbol) [0x00007FF6BAD89224]\nE       \t(No symbol) [0x00007FF6BAD8935B]\nE       \t(No symbol) [0x00007FF6BAD79B94]\nE       \tBaseThreadInitThunk [0x00007FF802F4257D+29]\nE       \tRtlUserThreadStart [0x00007FF80460AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1713849001992, "stop": 1713849089546, "uuid": "c77bc0b2-508f-4664-92d6-186ed4ce670f", "historyId": "7ea4c393e45e8340a6325e37e5326d53", "testCaseId": "7ea4c393e45e8340a6325e37e5326d53", "fullName": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission.test_T1097384.Test_Company#test_addEmployee", "labels": [{"name": "tag", "value": "testrail(ids=('C29678', 'C29679', 'C29680', 'C29686', 'C29687'))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission"}, {"name": "suite", "value": "test_T1097384"}, {"name": "subSuite", "value": "Test_Company"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "279524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission.test_T1097384"}]}