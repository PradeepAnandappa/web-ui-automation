{"name": "test_ACLPermission", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 120\nCurrent browser version is 123.0.6312.106 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF639F94D02+56194]\n\t(No symbol) [0x00007FF639F004B2]\n\t(No symbol) [0x00007FF639DA76AA]\n\t(No symbol) [0x00007FF639DE1652]\n\t(No symbol) [0x00007FF639DE094D]\n\t(No symbol) [0x00007FF639DDB84F]\n\t(No symbol) [0x00007FF639DD7DC2]\n\t(No symbol) [0x00007FF639E20954]\n\t(No symbol) [0x00007FF639E15C23]\n\t(No symbol) [0x00007FF639DE4A45]\n\t(No symbol) [0x00007FF639DE5AD4]\n\tGetHandleVerifier [0x00007FF63A30D5BB+3695675]\n\tGetHandleVerifier [0x00007FF63A366197+4059159]\n\tGetHandleVerifier [0x00007FF63A35DF63+4025827]\n\tGetHandleVerifier [0x00007FF63A02F029+687785]\n\t(No symbol) [0x00007FF639F0B508]\n\t(No symbol) [0x00007FF639F07564]\n\t(No symbol) [0x00007FF639F076E9]\n\t(No symbol) [0x00007FF639EF8094]\n\tBaseThreadInitThunk [0x00007FF802F4257D+29]\n\tRtlUserThreadStart [0x00007FF80460AA58+40]", "trace": "request = <SubRequest 'setup_driver' for <Function test_ACLPermission>>, getBrowser = 'chrome', getEnvironment = 'production'\n\n    @pytest.fixture(scope=\"function\")\n    def setup_driver(request, getBrowser, getEnvironment):\n        if getBrowser == \"chrome\":\n            chrome_options = webdriver.ChromeOptions()\n            file_path = Path.home() / \"PycharmProjects\" / \"allgeo_web_app_pro\" / \"src\" / \"Resources\" / \"Download\"\n            print(\"Download directory:\", file_path)\n    \n            chrome_options.add_argument(\"--window-size=1920,1080\")\n            chrome_options.add_argument(\"--disable-extensions\")\n            chrome_options.add_argument(\"--proxy-server='direct://'\")\n            chrome_options.add_argument(\"--proxy-bypass-list=*\")\n            chrome_options.add_argument(\"--start-maximized\")\n            # chrome_options.add_argument('--headless')\n            chrome_options.add_argument('--disable-gpu')\n            chrome_options.add_argument('--disable-dev-shm-usage')\n            chrome_options.add_argument('--no-sandbox')\n            chrome_options.add_argument('--ignore-certificate-errors')\n            prefs = {\"download.default_directory\": str(file_path),\n                         \"profile.default_content_setting_values.automatic_downloads\": 1}\n            chrome_options.add_experimental_option(\"prefs\", prefs)\n>           web_driver = webdriver.Chrome(\n                executable_path=\"C:\\\\Users\\\\prade\\\\PycharmProjects\\\\allgeo_web_app_pro\\\\Drivers\\\\chromedriver.exe\",\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:80: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:104: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:286: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:378: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002062EEFF650>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF639EF8094]\\\\n\\\\tBaseThreadInitThunk [0x00007FF802F4257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF80460AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 120\nE       Current browser version is 123.0.6312.106 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF639F94D02+56194]\nE       \t(No symbol) [0x00007FF639F004B2]\nE       \t(No symbol) [0x00007FF639DA76AA]\nE       \t(No symbol) [0x00007FF639DE1652]\nE       \t(No symbol) [0x00007FF639DE094D]\nE       \t(No symbol) [0x00007FF639DDB84F]\nE       \t(No symbol) [0x00007FF639DD7DC2]\nE       \t(No symbol) [0x00007FF639E20954]\nE       \t(No symbol) [0x00007FF639E15C23]\nE       \t(No symbol) [0x00007FF639DE4A45]\nE       \t(No symbol) [0x00007FF639DE5AD4]\nE       \tGetHandleVerifier [0x00007FF63A30D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF63A366197+4059159]\nE       \tGetHandleVerifier [0x00007FF63A35DF63+4025827]\nE       \tGetHandleVerifier [0x00007FF63A02F029+687785]\nE       \t(No symbol) [0x00007FF639F0B508]\nE       \t(No symbol) [0x00007FF639F07564]\nE       \t(No symbol) [0x00007FF639F076E9]\nE       \t(No symbol) [0x00007FF639EF8094]\nE       \tBaseThreadInitThunk [0x00007FF802F4257D+29]\nE       \tRtlUserThreadStart [0x00007FF80460AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: SessionNotCreatedException"}, "start": 1712746028285, "stop": 1712746028285, "uuid": "9c7cfe91-c4e5-4d59-bd8d-8ea51c179c94", "historyId": "35106ebd98b6f2cb6005038a7e52b201", "testCaseId": "35106ebd98b6f2cb6005038a7e52b201", "fullName": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission.test_T1536433.Test_Schedule#test_ACLPermission", "labels": [{"name": "tag", "value": "testrail(ids=('C38777',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission"}, {"name": "suite", "value": "test_T1536433"}, {"name": "subSuite", "value": "Test_Schedule"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "201480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.ACL_Impact.SubmitGreyedOutButtonACLPermission.test_T1536433"}]}