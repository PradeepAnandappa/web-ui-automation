{"name": "test_editTask", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method EditTaskPage.validate_modalTitle of <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10>>()\n +    where <bound method EditTaskPage.validate_modalTitle of <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10>> = <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10>.validate_modalTitle\n +      where <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10> = <test_T1097294.Test_Tasks object at 0x000002E7E0CA1CD0>.editTaskPage", "trace": "self = <test_T1097294.Test_Tasks object at 0x000002E7E0CA1CD0>\n\n    @pytestrail.case('C27842')\n    def test_editTask(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.user_login(config.AccoundID, config.UserName, config.Password)\n        self.monitorPage = MonitorPage(self.driver)\n        page_found = self.monitorPage.getPageTitle(\"Monitor\")\n        assert page_found\n        self.leftNavigationPanelPage = LeftNavigationPanelPage(self.driver)\n        self.leftNavigationPanelPage.click_Company()\n        self.employeesPage = EmployeesPage(self.driver)\n        self.employeesPage.click_company_icon(\"Task\")\n        self.tasksPage = TasksPage(self.driver)\n        time.sleep(5)\n        page_found = self.tasksPage.get_page_title()\n        assert page_found\n        taskId = self.employeesPage.generate_random_string(5) + str(1)\n        taskName = self.employeesPage.generate_random_string(7)\n        self.tasksPage.addTask(taskId, taskName)\n        time.sleep(2)\n        assert self.tasksPage.validate_SuccessUpdateMessage(\"added successfully\")\n        self.tasksPage.click_edit_for_TaskName(taskName)\n        time.sleep(5)\n        self.editTaskPage = EditTaskPage(self.driver)\n>       assert self.editTaskPage.validate_modalTitle()\nE       assert False\nE        +  where False = <bound method EditTaskPage.validate_modalTitle of <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10>>()\nE        +    where <bound method EditTaskPage.validate_modalTitle of <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10>> = <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10>.validate_modalTitle\nE        +      where <src.PageObjects.Company.Tasks.TasksUI.EditTask.EditTaskPage.EditTaskPage object at 0x000002E7E1A5DB10> = <test_T1097294.Test_Tasks object at 0x000002E7E0CA1CD0>.editTaskPage\n\nsrc\\Tests\\SmokeSanityTestSuite\\Company\\Tasks\\TasksUI\\EditTask\\test_T1097294.py:38: AssertionError"}, "start": 1715150557599, "stop": 1715151694625, "uuid": "00854a56-fb73-4575-bf69-5a1bdcad4692", "historyId": "4a9ecd96c5b134c3376f0d152ace5225", "testCaseId": "4a9ecd96c5b134c3376f0d152ace5225", "fullName": "src.Tests.SmokeSanityTestSuite.Company.Tasks.TasksUI.EditTask.test_T1097294.Test_Tasks#test_editTask", "labels": [{"name": "tag", "value": "testrail(ids=('C27842',))"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_driver')"}, {"name": "parentSuite", "value": "src.Tests.SmokeSanityTestSuite.Company.Tasks.TasksUI.EditTask"}, {"name": "suite", "value": "test_T1097294"}, {"name": "subSuite", "value": "Test_Tasks"}, {"name": "host", "value": "IN-QA-LT-01"}, {"name": "thread", "value": "89936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.Tests.SmokeSanityTestSuite.Company.Tasks.TasksUI.EditTask.test_T1097294"}]}